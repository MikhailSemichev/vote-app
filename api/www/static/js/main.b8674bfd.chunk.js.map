{"version":3,"sources":["utils/history.ts","stores/LoginStore.ts","utils/utils.ts","constants.ts","api/interceptors.ts","api/topicsApi.ts","api/votesWs.ts","stores/TopicsStore.ts","stores/VotesStore.ts","components/AuthRoute/AuthRoute.tsx","components/Header/Header.tsx","pages/LoginPage/LoginPage.tsx","pages/TopicListPage/TopicItem.tsx","pages/TopicListPage/TopicListPage.tsx","pages/EditTopicPage/EditTopicPage.tsx","pages/VotePage/NewCandidate/NewCandidate.tsx","pages/VotePage/VotePage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["createHistory","stores_LoginStore","login","localStorage","getItem","adminPassword","this","userInfo","setItem","removeItem","observable","getUserInfo","computed","action","stableSort","array","comparator","stabilizedArray","map","el","index","sort","a","b","order","uniqStrings","strings","uniq","Set","forEach","str","add","Array","from","SOCKET_EVENTS","REACT_APP_SERVICE_URL","process","trim","axios","defaults","baseURL","concat","interceptors","request","use","conf","loginStore","headers","ADMIN_PASSWORD","error","Promise","reject","topicsApi","getTopics","getTopic","saveTopic","deleteTopic","addCandidates","topicId","newCandidates","post","_callee","response","regenerator_default","wrap","_context","prev","next","get","sent","abrupt","data","mapTopic","stop","_callee2","id","_context2","topicJson","Object","objectSpread","_id","_callee3","topic","_context3","put","_callee4","_context4","delete","socket","votesWs","vote","candidateName","isVote","emit","onTopicVotesChange","onVote","onTopicChange","io","query","on","ON_VOTE","topicVotes","ON_TOPIC_CHANGE","close","stores_TopicsStore","isLoadingTopics","topics","runInAction","_this","t1","t2","_this2","filter","t","stores_VotesStore","AuthRoute","renderRote","props","Component","component","isLoggedIn","react","Redirect","to","pathname","state","location","_this$props","rest","objectWithoutProperties","Route","assign","render","React","Header","observer","handleLogOff","logOff","history","push","handleAppNameClick","className","onClick","title","LoginPage","withRouter","showAdminPassword","loginRef","createRef","adminPasswordRef","handleSubmit","e","preventDefault","setLogin","current","value","handleAdminPassword","isShow","setState","react_default","createElement","onSubmit","type","defaultValue","placeholder","ref","href","cn","hidden","autoComplete","TopicItem","handleDelete","Link","name","TopicListPage","handleNewTopic","window","confirm","topicsStore","loadTopics","isEmpty","length","TopicItem_TopicItem","key","EditTopicPage","isSaving","_this$state$topic","_candidatesText","isActive","isAllowAddCandidates","candidatesText","console","log","candidates","split","n","t0","alert","handleTextChange","_e$target","target","handleValueChange","handleStatusChange","isChecked","handleAllowAddCandidatesChange","defineProperty","loadTopic","prevProps","getTopicId","match","params","c","join","_this$state","disabled","htmlFor","onChange","rows","es_switch","checked","checkedChildren","unCheckedChildren","NewCandidate","isAdding","handleAddingCandidate","handleAddCandidate","clearForm","VotePage","closeSocket","handleVote","votesStore","_this3","candidatesInfo","logins","v","isVoted","includes","place","c1","c2","prevVotesCount","is-voted","fa-thumbs-o-up","fa-thumbs-up","VotePage_NewCandidate_NewCandidate","App","Router","Header_Header_Header","Switch","path","AuthRoute_AuthRoute","exact","Boolean","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8674bfd.chunk.js","sourcesContent":["// tslint:disable-next-line\r\nimport createHistory from 'history/createHashHistory';\r\nexport default createHistory();\r\n","import { observable, action, computed } from 'mobx';\r\n\r\nclass LoginStore {\r\n    @observable userInfo = this.getUserInfo();\r\n\r\n    getUserInfo() {\r\n        const login = localStorage.getItem('LOGIN');\r\n        const adminPassword = localStorage.getItem('ADMIN_PASSWORD');\r\n\r\n        return login ? { login, adminPassword } : null;\r\n    }\r\n\r\n    @computed\r\n    get isLoggedIn() {\r\n        return !!this.userInfo;\r\n    }\r\n\r\n    @action\r\n    setLogin(login: string, adminPassword: string) {\r\n        this.userInfo = { login, adminPassword };\r\n        localStorage.setItem('LOGIN', login);\r\n        localStorage.setItem('ADMIN_PASSWORD', adminPassword);\r\n    }\r\n\r\n    @action\r\n    logOff() {\r\n        this.userInfo = null;\r\n        localStorage.removeItem('LOGIN');\r\n        localStorage.removeItem('ADMIN_PASSWORD');\r\n    }\r\n}\r\n\r\nexport default new LoginStore();\r\n","export function stableSort<T>(\r\n    array: T[],\r\n    comparator: (a: any, b: any) => number,\r\n): T[] {\r\n    const stabilizedArray = array.map(\r\n        (el: T, index: number): [T, number] => [el, index],\r\n    );\r\n\r\n    stabilizedArray.sort((a: [T, number], b: [T, number]) => {\r\n        const order = comparator(a[0], b[0]);\r\n        return order === 0 ? a[1] - b[1] : order;\r\n    });\r\n\r\n    return stabilizedArray.map(el => el[0]);\r\n}\r\n\r\nexport function uniqStrings(strings: string[]): string[] {\r\n    const uniq = new Set<string>();\r\n    strings.forEach(str => uniq.add(str));\r\n    return Array.from(uniq);\r\n}\r\n","export const REACT_APP_SERVICE_URL = process.env.REACT_APP_SERVICE_URL\r\n    ? process.env.REACT_APP_SERVICE_URL.trim() // PRODUCTION MODE\r\n    : 'http://localhost:3333'; // DEVELOPMENT MODE\r\n\r\nexport enum SOCKET_EVENTS {\r\n    ON_VOTE = 'ON_VOTE',\r\n    ON_TOPIC_CHANGE = 'ON_TOPIC_CHANGE',\r\n}\r\n","import axios from 'axios';\r\nimport { REACT_APP_SERVICE_URL } from '../constants';\r\nimport { loginStore } from '../stores';\r\n\r\naxios.defaults.baseURL = `${REACT_APP_SERVICE_URL}/api`;\r\n\r\naxios.interceptors.request.use(\r\n    conf => {\r\n        if (loginStore.userInfo) {\r\n            conf.headers.ADMIN_PASSWORD = loginStore.userInfo.adminPassword;\r\n        }\r\n        return conf;\r\n    },\r\n    error => {\r\n        // Do something with request error\r\n        return Promise.reject(error);\r\n    },\r\n);\r\n","import axios from 'axios';\r\nimport { ITopic } from '../types/interfaces';\r\n\r\nexport default {\r\n    getTopics,\r\n    getTopic,\r\n    saveTopic,\r\n    deleteTopic,\r\n    addCandidates,\r\n};\r\n\r\nasync function getTopics(): Promise<ITopic[]> {\r\n    const response = await axios.get<ITopic[]>('/topics');\r\n    return response.data.map(mapTopic);\r\n}\r\n\r\nasync function getTopic(id: string) {\r\n    const response = await axios.get<ITopic>(`/topics/${id}`);\r\n    if (response.data) {\r\n        return mapTopic(response.data);\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction mapTopic(topicJson: any): ITopic {\r\n    return {\r\n        ...topicJson,\r\n        id: topicJson._id,\r\n    };\r\n}\r\n\r\nasync function saveTopic(topic: ITopic) {\r\n    if (topic.id) {\r\n        // update existing\r\n        return axios.put('/topics', topic);\r\n    }\r\n    // create new\r\n    return axios.post('/topics', topic);\r\n}\r\n\r\nasync function deleteTopic(id: string) {\r\n    return axios.delete(`/topics/${id}`);\r\n}\r\n\r\nfunction addCandidates(topicId: string, newCandidates: string[]) {\r\n    return axios.post('/topics/addCandidates', { topicId, newCandidates });\r\n}\r\n","import io from 'socket.io-client';\r\nimport { REACT_APP_SERVICE_URL, SOCKET_EVENTS } from '../constants';\r\nimport { IVote, ITopic } from '../types/interfaces';\r\n\r\nexport default {\r\n    vote,\r\n    onTopicVotesChange,\r\n};\r\n\r\nlet socket: SocketIOClient.Socket;\r\n\r\nfunction vote(\r\n    topicId: string,\r\n    candidateName: string,\r\n    login: string,\r\n    isVote: boolean,\r\n) {\r\n    socket.emit('vote', { topicId, candidateName, login, isVote });\r\n}\r\n\r\nfunction onTopicVotesChange(\r\n    topicId: string,\r\n    onVote: (topicVotes: IVote[]) => void,\r\n    onTopicChange: (topic: ITopic) => void,\r\n) {\r\n    socket = io(`${REACT_APP_SERVICE_URL}/votes`, { query: `topicId=${topicId}` });\r\n\r\n    socket.on(SOCKET_EVENTS.ON_VOTE, (topicVotes: IVote[]) => {\r\n        onVote(topicVotes);\r\n    });\r\n\r\n    socket.on(SOCKET_EVENTS.ON_TOPIC_CHANGE, (topic: ITopic) => {\r\n        onTopicChange(topic);\r\n    });\r\n\r\n    return () => socket.close();\r\n}\r\n","import { observable, action, runInAction } from 'mobx';\r\n\r\nimport { stableSort } from '../utils/utils';\r\nimport { topicsApi } from '../api';\r\nimport { ITopic } from '../types/interfaces';\r\n\r\nclass TopicsStore {\r\n    @observable isLoadingTopics = false;\r\n    @observable topics: ITopic[] = [];\r\n\r\n    @action\r\n    async loadTopics() {\r\n        this.isLoadingTopics = true;\r\n        this.topics = [];\r\n        const topics = await topicsApi.getTopics();\r\n\r\n        runInAction(() => {\r\n            this.topics = stableSort(topics, (t1, t2) => {\r\n                if (t1.id === t2.id) {\r\n                    return 0;\r\n                }\r\n                return t1.id < t2.id ? -1 : 1;\r\n            });\r\n            this.isLoadingTopics = false;\r\n        });\r\n    }\r\n\r\n    getTopic(id: string) {\r\n        return topicsApi.getTopic(id);\r\n    }\r\n\r\n    saveTopic(topic: ITopic) {\r\n        return topicsApi.saveTopic(topic);\r\n    }\r\n\r\n    async deleteTopic(id: string) {\r\n        await topicsApi.deleteTopic(id);\r\n        runInAction(() => {\r\n            this.topics = this.topics.filter(t => t.id !== id);\r\n        });\r\n    }\r\n\r\n    addCandidates(topicId: string, newCandidates: string[]) {\r\n        return topicsApi.addCandidates(topicId, newCandidates);\r\n    }\r\n}\r\n\r\nexport default new TopicsStore();\r\n","import { observable, action, runInAction } from 'mobx';\r\n\r\nimport { votesWs } from '../api';\r\nimport loginStore from './LoginStore';\r\nimport { SOCKET_EVENTS } from '../constants';\r\nimport { IVote, ITopic } from '../types/interfaces';\r\n\r\nclass VotesStore {\r\n    @observable topicVotes: IVote[] = [];\r\n\r\n    @action\r\n    async vote(topicId: string, candidateName: string, isVote: boolean) {\r\n        return votesWs.vote(\r\n            topicId,\r\n            candidateName,\r\n            loginStore.userInfo!.login,\r\n            isVote,\r\n        );\r\n    }\r\n\r\n    @action\r\n    onTopicChange(topicId: string, onTopicChange: (topic: ITopic) => void) {\r\n        this.topicVotes = [];\r\n        return votesWs.onTopicVotesChange(\r\n            topicId,\r\n            (topicVotes: IVote[]) => {\r\n                runInAction(() => {\r\n                    this.topicVotes = topicVotes;\r\n                });\r\n            },\r\n            onTopicChange,\r\n        );\r\n    }\r\n}\r\n\r\nexport default new VotesStore();\r\n","import * as React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\nimport { loginStore } from '../../stores';\r\n\r\ninterface IProps {\r\n    component: React.ComponentClass<any>;\r\n    exact?: boolean;\r\n    path: string;\r\n}\r\n\r\nexport default class AuthRoute extends React.Component<IProps> {\r\n    renderRote = (props: any) => {\r\n        const { component: Component } = this.props;\r\n        return loginStore.isLoggedIn ? (\r\n            <Component {...props} />\r\n        ) : (\r\n            <Redirect\r\n                to={{\r\n                    pathname: '/login',\r\n                    state: { from: props.location },\r\n                }}\r\n            />\r\n        );\r\n    };\r\n\r\n    render() {\r\n        const { component, ...rest } = this.props;\r\n        return <Route {...rest} render={this.renderRote} />;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport history from '../../utils/history';\r\n\r\nimport { loginStore } from '../../stores';\r\nimport './Header.scss';\r\n\r\n@observer\r\nexport default class Header extends React.Component {\r\n    handleLogOff = () => {\r\n        loginStore.logOff();\r\n        history.push('/login');\r\n    };\r\n\r\n    handleAppNameClick = () => {\r\n        history.push('/');\r\n    };\r\n\r\n    render() {\r\n        const { userInfo } = loginStore;\r\n        return (\r\n            <div className=\"header\">\r\n                <div\r\n                    className=\"header-app-name\"\r\n                    onClick={this.handleAppNameClick}\r\n                >\r\n                    Vote App\r\n                </div>\r\n                {userInfo && (\r\n                    <div className=\"header-login\">\r\n                        <i className=\"fa fa-user-circle-o\" />\r\n                        <div className=\"header-login-text\">\r\n                            {userInfo.login}\r\n                        </div>\r\n                        <i\r\n                            className=\"fa fa-sign-out\"\r\n                            title=\"Log off\"\r\n                            onClick={this.handleLogOff}\r\n                        />\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\r\nimport { observer } from 'mobx-react';\r\nimport cn from 'classnames';\r\nimport history from '../../utils/history';\r\n\r\nimport { loginStore } from '../../stores';\r\nimport './LoginPage.scss';\r\n\r\n@observer\r\n@(withRouter as any)\r\nexport default class LoginPage extends Component<RouteComponentProps> {\r\n    state = { showAdminPassword: false };\r\n\r\n    private loginRef = React.createRef<HTMLInputElement>();\r\n    private adminPasswordRef = React.createRef<HTMLInputElement>();\r\n\r\n    handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        loginStore.setLogin(\r\n            this.loginRef.current!.value,\r\n            this.adminPasswordRef.current!.value,\r\n        );\r\n\r\n        const { from } = this.props.location.state || {\r\n            from: { pathname: '/' },\r\n        };\r\n        history.push(from.pathname);\r\n    };\r\n\r\n    handleAdminPassword = (e: React.MouseEvent<HTMLElement>) => {\r\n        e.preventDefault();\r\n        const isShow = !this.state.showAdminPassword;\r\n        this.setState({\r\n            showAdminPassword: isShow,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { userInfo } = loginStore;\r\n        const { showAdminPassword } = this.state;\r\n        return (\r\n            <div className=\"app-page login-page\">\r\n                <div className=\"page-title\">\r\n                    <h1>Login Page</h1>\r\n                    <p>Vote App is application for voting</p>\r\n                </div>\r\n                <form className=\"login-form\" onSubmit={this.handleSubmit}>\r\n                    <input\r\n                        type=\"text\"\r\n                        defaultValue={(userInfo && userInfo.login) || ''}\r\n                        placeholder=\"Please type your name as in UPSA...\"\r\n                        ref={this.loginRef}\r\n                    />\r\n                    <div className=\"btn-container\">\r\n                        <div className=\"admin-container\">\r\n                            role:\r\n                            <a href=\"#\" onClick={this.handleAdminPassword}>\r\n                                admin\r\n                            </a>\r\n                            <input\r\n                                type=\"password\"\r\n                                className={cn('password-input', {\r\n                                    hidden: !showAdminPassword,\r\n                                })}\r\n                                autoComplete=\"new-password\"\r\n                                defaultValue={\r\n                                    (userInfo && userInfo.adminPassword) || ''\r\n                                }\r\n                                ref={this.adminPasswordRef}\r\n                            />\r\n                        </div>\r\n                        <button className=\"login-btn\">Login</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { ITopic } from '../../types/interfaces';\r\n\r\ninterface IProps {\r\n    topic: ITopic;\r\n    handleDelete: (topic: ITopic) => void;\r\n}\r\n\r\nexport default class TopicItem extends React.Component<IProps> {\r\n    handleDelete = () => {\r\n        const { topic, handleDelete } = this.props;\r\n        handleDelete(topic);\r\n    };\r\n\r\n    render() {\r\n        const { topic } = this.props;\r\n        return (\r\n            <div className=\"topic-item\">\r\n                <Link className=\"topic-item-name\" to={`/vote/${topic.id}`}>\r\n                    {topic.name}\r\n                </Link>\r\n                <Link to={`/topic/${topic.id}`} title=\"Edit Topic\">\r\n                    <i className=\"fa fa-pencil-square-o\" />\r\n                </Link>\r\n                <a href=\"#\" onClick={this.handleDelete} title=\"Delete Topic\">\r\n                    <i className=\"fa fa-times\" />\r\n                </a>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { ITopic } from '../../types/interfaces';\r\nimport history from '../../utils/history';\r\nimport { topicsStore } from '../../stores';\r\n\r\nimport TopicItem from './TopicItem';\r\n\r\nimport './TopicListPage.scss';\r\n\r\n@observer\r\nexport default class TopicListPage extends Component {\r\n    componentWillMount() {\r\n        topicsStore.loadTopics();\r\n    }\r\n\r\n    handleNewTopic = () => {\r\n        history.push('/topic');\r\n    };\r\n\r\n    handleDelete = (topic: ITopic) => {\r\n        if (window.confirm(`Delete \"${topic.name}\"?`)) {\r\n            topicsStore.deleteTopic(topic.id!);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { topics, isLoadingTopics } = topicsStore;\r\n        const isEmpty = !isLoadingTopics && !topics.length;\r\n\r\n        return (\r\n            <div className=\"app-page topic-list-page\">\r\n                <div className=\"page-title\">\r\n                    <h1>Topics to Vote</h1>\r\n                    <button onClick={this.handleNewTopic}>New Topic</button>\r\n                </div>\r\n                <div>\r\n                    {isLoadingTopics && 'Loading...'}\r\n                    {isEmpty && 'No topics. Yet :)'}\r\n                    {topics &&\r\n                        topics.map(topic => (\r\n                            <TopicItem\r\n                                key={topic.id}\r\n                                topic={topic}\r\n                                handleDelete={this.handleDelete}\r\n                            />\r\n                        ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Switch } from 'antd';\r\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { uniqStrings } from '../../utils/utils';\r\n\r\nimport { topicsStore } from '../../stores';\r\nimport './EditTopicPage.scss';\r\nimport { ITopic, ICandidate } from '../../types/interfaces';\r\n\r\ninterface IRouteProps {\r\n    topicId: string;\r\n}\r\n\r\ninterface IProps extends RouteComponentProps<IRouteProps> {}\r\n\r\ninterface IState {\r\n    topic: ITopicFormFields | null;\r\n    isSaving: boolean;\r\n}\r\n\r\ninterface ITopicFormFields extends ITopic {\r\n    candidatesText: string;\r\n}\r\n\r\n@(withRouter as any)\r\n@observer\r\nexport default class EditTopicPage extends Component<IProps> {\r\n    state: IState = {\r\n        topic: null,\r\n        isSaving: false,\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.loadTopic();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: IProps) {\r\n        if (this.getTopicId() !== prevProps.match.params.topicId) {\r\n            this.loadTopic();\r\n        }\r\n    }\r\n\r\n    handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        if (!this.state.isSaving && this.state.topic) {\r\n            const {\r\n                _id,\r\n                id,\r\n                name,\r\n                candidatesText,\r\n                isActive,\r\n                isAllowAddCandidates,\r\n            } = this.state.topic;\r\n\r\n            console.log(name);\r\n\r\n            this.setState({ isSaving: true });\r\n            try {\r\n                await topicsStore.saveTopic({\r\n                    id,\r\n                    _id,\r\n                    name,\r\n                    candidates: uniqStrings(candidatesText.split('\\n'))\r\n                        .filter(n => n)\r\n                        .map(n => ({ name: n })),\r\n                    isActive,\r\n                    isAllowAddCandidates,\r\n                });\r\n                this.props.history.push('/');\r\n            } catch (err) {\r\n                alert(err.response.data);\r\n                this.setState({ isSaving: false });\r\n            }\r\n        }\r\n    };\r\n\r\n    handleTextChange = (\r\n        e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    ) => {\r\n        const { name, value } = e.target;\r\n        this.handleValueChange(name as keyof ITopicFormFields, value);\r\n    };\r\n\r\n    handleStatusChange = (isChecked: boolean) => {\r\n        this.handleValueChange('isActive', isChecked);\r\n    };\r\n\r\n    handleAllowAddCandidatesChange = (isChecked: boolean) => {\r\n        this.handleValueChange('isAllowAddCandidates', isChecked);\r\n    };\r\n\r\n    handleValueChange = (\r\n        name: keyof ITopicFormFields,\r\n        value: string | boolean,\r\n    ) => {\r\n        const topic: ITopicFormFields = {\r\n            ...this.state.topic!,\r\n            [name]: value,\r\n        };\r\n        this.setState({ topic });\r\n    };\r\n\r\n    getTopicId() {\r\n        return this.props.match.params.topicId;\r\n    }\r\n\r\n    async loadTopic() {\r\n        const topicId = this.getTopicId();\r\n        const topic: ITopicFormFields = topicId\r\n            ? ((await topicsStore.getTopic(topicId)) as ITopicFormFields)\r\n            : {\r\n                  name: '',\r\n                  isActive: true,\r\n                  isAllowAddCandidates: true,\r\n                  candidates: [],\r\n                  candidatesText: '',\r\n              };\r\n\r\n        topic.candidatesText = topic\r\n            .candidates!.map((c: ICandidate) => c.name)\r\n            .join('\\n');\r\n        this.setState({\r\n            topic: { ...topic },\r\n            isSaving: false,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const topicId = this.getTopicId();\r\n        const { topic, isSaving } = this.state;\r\n\r\n        return (\r\n            <div className=\"app-page edit-topic-page\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <div className=\"page-header\">\r\n                        <h1>{topicId ? 'Edit' : 'Create'} Topic Page</h1>\r\n                        <button className=\"save-btn\" disabled={isSaving}>\r\n                            {isSaving ? 'Saving...' : 'Save'}\r\n                        </button>\r\n                    </div>\r\n\r\n                    {topic && (\r\n                        <div>\r\n                            <div className=\"field\">\r\n                                <div className=\"field-label\">\r\n                                    <label htmlFor=\"topicName\">\r\n                                        Topic Name\r\n                                    </label>\r\n                                </div>\r\n                                <input\r\n                                    id=\"topicName\"\r\n                                    name=\"name\"\r\n                                    value={topic.name}\r\n                                    onChange={this.handleTextChange}\r\n                                    type=\"text\"\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"field\">\r\n                                <div className=\"field-label\">\r\n                                    <label htmlFor=\"topicCandidates\">\r\n                                        Topic Candidates\r\n                                    </label>\r\n                                </div>\r\n                                <textarea\r\n                                    id=\"topicCandidates\"\r\n                                    name=\"candidatesText\"\r\n                                    onChange={this.handleTextChange}\r\n                                    rows={10}\r\n                                    value={topic.candidatesText}\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"field\">\r\n                                <label>Topic Status:</label>\r\n                                <Switch\r\n                                    checked={topic.isActive}\r\n                                    onChange={this.handleStatusChange}\r\n                                    checkedChildren=\"In progress\"\r\n                                    unCheckedChildren=\"Closed\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"field\">\r\n                                <label>Allow Add Candidates:</label>\r\n                                <Switch\r\n                                    checked={topic.isAllowAddCandidates}\r\n                                    onChange={\r\n                                        this.handleAllowAddCandidatesChange\r\n                                    }\r\n                                    checkedChildren=\"Yes\"\r\n                                    unCheckedChildren=\"No\"\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"btn-container\">\r\n                                <button\r\n                                    className=\"save-btn\"\r\n                                    disabled={isSaving}\r\n                                >\r\n                                    {isSaving ? 'Saving...' : 'Save'}\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </form>\r\n                {!topic && <div>Loading...</div>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { uniqStrings } from '../../../utils/utils';\r\n\r\nimport { topicsStore } from '../../../stores';\r\nimport { ITopic } from '../../../types/interfaces';\r\n\r\nimport './NewCandidate.scss';\r\n\r\ninterface IProps {\r\n    topic: ITopic;\r\n}\r\n\r\nclass NewCandidate extends Component<IProps> {\r\n    state = {\r\n        isAdding: false,\r\n        candidatesText: '',\r\n    };\r\n\r\n    handleAddingCandidate = () => {\r\n        this.setState({ isAdding: true });\r\n    };\r\n\r\n    handleAddCandidate = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        const { topic } = this.props;\r\n        const newCandidates = uniqStrings(\r\n            this.state.candidatesText\r\n                .split('\\n')\r\n                .map(name => name.trim())\r\n                .filter(name => name),\r\n        );\r\n\r\n        this.clearForm();\r\n        topicsStore.addCandidates(topic.id!, newCandidates);\r\n    };\r\n\r\n    handleTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        this.setState({\r\n            candidatesText: e.target.value,\r\n        });\r\n    };\r\n\r\n    clearForm() {\r\n        this.setState({\r\n            isAdding: false,\r\n            candidatesText: '',\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { isAdding, candidatesText } = this.state;\r\n        const { topic } = this.props;\r\n\r\n        if (!topic) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div className=\"new-candidate\">\r\n                {topic && (\r\n                    <div>\r\n                        {!isAdding && (\r\n                            <button onClick={this.handleAddingCandidate}>\r\n                                Add New Option\r\n                            </button>\r\n                        )}\r\n                        {isAdding && (\r\n                            <div>\r\n                                <form onSubmit={this.handleAddCandidate}>\r\n                                    <textarea\r\n                                        value={candidatesText}\r\n                                        onChange={this.handleTextChange}\r\n                                    />\r\n                                    <button\r\n                                        className=\"save-btn\"\r\n                                        disabled={!candidatesText}\r\n                                    >\r\n                                        Save\r\n                                    </button>\r\n                                </form>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewCandidate;\r\n","import React, { Component } from 'react';\r\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\r\nimport { observer } from 'mobx-react';\r\nimport cn from 'classnames';\r\n\r\nimport { topicsStore, votesStore, loginStore } from '../../stores';\r\nimport { stableSort } from '../../utils/utils';\r\n\r\nimport './VotePage.scss';\r\n\r\nimport NewCandidate from './NewCandidate/NewCandidate';\r\nimport { ITopic } from '../../types/interfaces';\r\n\r\ninterface IRouteProps {\r\n    topicId: string;\r\n}\r\n\r\ninterface IProps extends RouteComponentProps<IRouteProps> {}\r\ninterface IState {\r\n    topic: ITopic | null;\r\n}\r\n\r\ntype Fn = () => void;\r\n\r\ninterface ICandidateInfo {\r\n    name: string;\r\n    isVoted: boolean;\r\n    logins: string[];\r\n    place: number;\r\n}\r\n\r\n@(withRouter as any)\r\n@observer\r\nclass VotePage extends Component<IProps> {\r\n    state: IState = {\r\n        topic: null,\r\n    };\r\n    private closeSocket: Fn | undefined;\r\n\r\n    componentDidMount() {\r\n        this.loadTopic();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: IProps) {\r\n        if (this.getTopicId() !== prevProps.match.params.topicId) {\r\n            this.loadTopic();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.closeSocket) {\r\n            this.closeSocket();\r\n        }\r\n    }\r\n\r\n    handleVote = (candidateName: string, isVote: boolean) => {\r\n        votesStore.vote(this.getTopicId(), candidateName, isVote);\r\n    };\r\n\r\n    getTopicId() {\r\n        return this.props.match.params.topicId;\r\n    }\r\n\r\n    async loadTopic() {\r\n        const topicId = this.getTopicId();\r\n\r\n        if (this.closeSocket) {\r\n            this.closeSocket();\r\n        }\r\n        this.closeSocket = votesStore.onTopicChange(topicId, () => {\r\n            // Reload all topic information\r\n            this.loadTopic();\r\n        });\r\n\r\n        const topic = await topicsStore.getTopic(topicId);\r\n\r\n        this.setState({\r\n            topicId,\r\n            topic: topic && { ...topic },\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { topic } = this.state;\r\n        const { topicVotes } = votesStore;\r\n        const { userInfo } = loginStore;\r\n        let candidatesInfo: ICandidateInfo[] = [];\r\n\r\n        if (topic && topicVotes) {\r\n            candidatesInfo = topic.candidates.map(c => {\r\n                const logins = topicVotes\r\n                    .filter(v => c.name === v.candidateName)\r\n                    .map(v => v.login);\r\n\r\n                return {\r\n                    name: c.name,\r\n                    isVoted: logins.includes(userInfo!.login),\r\n                    logins,\r\n                    place: 0,\r\n                };\r\n            });\r\n            candidatesInfo = stableSort(candidatesInfo, (c1, c2) => {\r\n                return c2.logins.length - c1.logins.length;\r\n            });\r\n\r\n            let place = 1;\r\n            const TOP_PLACES = 3;\r\n            let prevVotesCount: number;\r\n            candidatesInfo = candidatesInfo.map(c => {\r\n                if (place <= TOP_PLACES && c.logins.length) {\r\n                    if (prevVotesCount && prevVotesCount !== c.logins.length) {\r\n                        place++;\r\n                    }\r\n                    prevVotesCount = c.logins.length;\r\n                    return {\r\n                        ...c,\r\n                        place,\r\n                    };\r\n                }\r\n                return c;\r\n            });\r\n        }\r\n\r\n        return (\r\n            <div className=\"app-page vote-page\">\r\n                {topic && (\r\n                    <div>\r\n                        <h1>{topic.name}</h1>\r\n                        <div>\r\n                            {candidatesInfo.map(c => (\r\n                                <div\r\n                                    className={cn('candidate-item', {\r\n                                        'is-voted': c.isVoted,\r\n                                    })}\r\n                                    key={c.name}\r\n                                >\r\n                                    <div className=\"votes-count\">\r\n                                        <div\r\n                                            className={cn('count', {\r\n                                                [`place-${c.place}`]: c.place,\r\n                                            })}\r\n                                            title={c.logins.join(' | ')}\r\n                                        >\r\n                                            {c.logins.length}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"candidate-name\">\r\n                                        {c.name}\r\n                                    </div>\r\n                                    {topic.isActive && (\r\n                                        <i\r\n                                            className={cn('fa', 'vote-btn', {\r\n                                                'fa-thumbs-o-up': !c.isVoted,\r\n                                                'fa-thumbs-up': c.isVoted,\r\n                                            })}\r\n                                            onClick={\r\n                                                /* tslint:disable-line */ () =>\r\n                                                    this.handleVote(\r\n                                                        c.name,\r\n                                                        !c.isVoted,\r\n                                                    )\r\n                                            }\r\n                                        />\r\n                                    )}\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                        {topic.isAllowAddCandidates && (\r\n                            <NewCandidate topic={topic} />\r\n                        )}\r\n                    </div>\r\n                )}\r\n                {!topic && <div>Loading...</div>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default VotePage;\r\n","import * as React from 'react';\r\nimport { Router, Switch, Route } from 'react-router-dom';\r\n\r\nimport history from './utils/history';\r\n\r\nimport AuthRoute from './components/AuthRoute/AuthRoute';\r\nimport Header from './components/Header/Header';\r\nimport LoginPage from './pages/LoginPage/LoginPage';\r\nimport TopicListPage from './pages/TopicListPage/TopicListPage';\r\nimport EditTopicPage from './pages/EditTopicPage/EditTopicPage';\r\nimport VotePage from './pages/VotePage/VotePage';\r\n\r\n// tslint:disable-next-line\r\nimport 'antd/dist/antd.css';\r\nimport './App.scss';\r\n\r\nclass App extends React.Component {\r\n    render() {\r\n        return (\r\n            <Router history={history}>\r\n                <div className=\"app\">\r\n                    <Header />\r\n                    <Switch>\r\n                        <Switch>\r\n                            <Route path=\"/login\" component={LoginPage} />\r\n                            <AuthRoute\r\n                                exact={true}\r\n                                path=\"/\"\r\n                                component={TopicListPage}\r\n                            />\r\n                            <AuthRoute\r\n                                path=\"/topic/:topicId?\"\r\n                                component={EditTopicPage}\r\n                            />\r\n                            <AuthRoute\r\n                                path=\"/vote/:topicId\"\r\n                                component={VotePage}\r\n                            />\r\n                        </Switch>\r\n                    </Switch>\r\n                </div>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.1/8 is considered localhost for IPv4.\r\n        window.location.hostname.match(\r\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n        ),\r\n);\r\n\r\ninterface IConfig {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n}\r\n\r\nexport function register(config?: IConfig) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(\r\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n            window.location.href,\r\n        );\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit http://bit.ly/CRA-PWA',\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: IConfig) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: IConfig) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null &&\r\n                    contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.',\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}